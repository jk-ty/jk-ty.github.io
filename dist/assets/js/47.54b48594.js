(window.webpackJsonp=window.webpackJsonp||[]).push([[47],{1431:function(a,s,t){a.exports=t.p+"assets/img/image-20220707140122006.cea35643.png"},1432:function(a,s,t){a.exports=t.p+"assets/img/image-20220707141138403.8cf82546.png"},1614:function(a,s,t){"use strict";t.r(s);var n=t(6),e=Object(n.a)({},(function(){var a=this,s=a.$createElement,n=a._self._c||s;return n("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[n("h1",{attrs:{id:"_4、对象与类"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、对象与类"}},[a._v("#")]),a._v(" 4、对象与类")]),a._v(" "),n("h2",{attrs:{id:"_1、类的声明"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_1、类的声明"}},[a._v("#")]),a._v(" 1、类的声明")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" 类名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("String")]),a._v(" name"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\t\t"),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//成员变量")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("void")]),a._v(" 方法名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    代码块\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br"),n("span",{staticClass:"line-number"},[a._v("4")]),n("br"),n("span",{staticClass:"line-number"},[a._v("5")]),n("br"),n("span",{staticClass:"line-number"},[a._v("6")]),n("br"),n("span",{staticClass:"line-number"},[a._v("7")]),n("br")])]),n("h2",{attrs:{id:"_2"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_2"}},[a._v("#")]),a._v(" 2")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" 构造器名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("数据类型 参数名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("……"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//构造器完成的功能代码")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("p",[a._v("1、构造器在对象创建之前执行")]),a._v(" "),n("p",[a._v("2、构造器名必须和类名一致")]),a._v(" "),n("p",[a._v("3、构造器没有返回值类型")]),a._v(" "),n("p",[a._v("4、任何类都含有构造器。如果没有显式地定义类的构造器，则系统会为该类提供一个默认的无参的构造器。一旦在类中显式地定义了构造器，系统就不会再为这个类提供默认的构造器了。")]),a._v(" "),n("p",[a._v("类的使用")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("对象名 "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" 构造器"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("参数列表"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n如输入对象的创建：\n"),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),a._v(" input "),n("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("Scanner")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("System")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("in"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("p",[a._v("属性和方法的调用：")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[a._v("对象名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("方法名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("h2",{attrs:{id:"_3、方法重载"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_3、方法重载"}},[a._v("#")]),a._v(" 3、方法重载")]),a._v(" "),n("p",[a._v("方法重载: 同一个类中定义了多个方法名相同而参数不同的方法重载在同一个类中，方法名相同，参数不同（参数的个数、顺序、类型不同）")]),a._v(" "),n("p",[a._v("构造器重载同上")]),a._v(" "),n("h2",{attrs:{id:"_4、方法的返回值类型"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_4、方法的返回值类型"}},[a._v("#")]),a._v(" 4、方法的返回值类型：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("无返回值类型：void，return;//结束方法体\n有返回值类型为：数据类型(基本数据类型、引用数据类型)，return 数据;//结束方法体，并且返回一条数据，也可以不返回数据\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br")])]),n("h2",{attrs:{id:"_5、this的两种使用方法"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_5、this的两种使用方法"}},[a._v("#")]),a._v(" 5、this的两种使用方法：")]),a._v(" "),n("p",[a._v("如果发生局部变量和成员变量命名冲突时，可以通过this.成员变量名的方式区分成员变量和局部变量。")]),a._v(" "),n("p",[a._v("一个构造方法中需要调用本类的另一个构造方法，可以通过this()的方式调用，但this()必须要书写在第一行。")]),a._v(" "),n("h2",{attrs:{id:"_6、super"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_6、super"}},[a._v("#")]),a._v(" 6、super：")]),a._v(" "),n("p",[a._v("super代表的是父类对象")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("属性名\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("方法名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(";")]),a._v("\n"),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("super")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("参数列表"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("  "),n("span",{pre:!0,attrs:{class:"token comment"}},[a._v("//用于在子类的构造方法中调用父类的构造方法")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("h2",{attrs:{id:"_7、final关键字"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_7、final关键字"}},[a._v("#")]),a._v(" 7、final关键字：")]),a._v(" "),n("p",[a._v("​\t\t1、修饰类：类不能继承，final 类中的所有成员方法都会被隐式的指定为 final 方法；")]),a._v(" "),n("p",[a._v("​\t\t2、修饰符变量：该变量为常量，，如果是基本数据类型的变量，则其数值一旦在初始化之后便不能更改；如果是引用类型的变量，则在对其初始化之后便不能让其指向另一个对象。")]),a._v(" "),n("p",[a._v("​\t\t3、修饰符方法：方法不能重写")]),a._v(" "),n("h2",{attrs:{id:"_8、访问修饰符"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_8、访问修饰符"}},[a._v("#")]),a._v(" 8、访问修饰符")]),a._v(" "),n("table",[n("thead",[n("tr",[n("th",[a._v("修饰符")]),a._v(" "),n("th",[a._v("访问范围")]),a._v(" "),n("th",[a._v("是否能被继承")])])]),a._v(" "),n("tbody",[n("tr",[n("td",[a._v("private")]),a._v(" "),n("td",[a._v("本类内部")]),a._v(" "),n("td",[a._v("不能被继承")])]),a._v(" "),n("tr",[n("td",[a._v("(default)")]),a._v(" "),n("td",[a._v("本类内部+同包其他类")]),a._v(" "),n("td",[a._v("能被同包的子类继承")])]),a._v(" "),n("tr",[n("td",[a._v("protected")]),a._v(" "),n("td",[a._v("本类内部+同包其他类+非同包的子类")]),a._v(" "),n("td",[a._v("能被继承")])]),a._v(" "),n("tr",[n("td",[a._v("public")]),a._v(" "),n("td",[a._v("公开能被所有类访问")]),a._v(" "),n("td",[a._v("能被继承")])])])]),a._v(" "),n("h2",{attrs:{id:"_9、java的三大特性"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#_9、java的三大特性"}},[a._v("#")]),a._v(" 9、JAVA的三大特性")]),a._v(" "),n("h4",{attrs:{id:"一、封装"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#一、封装"}},[a._v("#")]),a._v(" 一、封装")]),a._v(" "),n("p",[a._v("​\t\t封装指隐藏对象的状态信息（属性），不允许外部对象直接访问对象的内部信息（private实现）。但是可以提供一些可以被外界访问的方法来操作属性。")]),a._v(" "),n("p",[a._v("​\t\t将类中成员变量private，提供public的get和set方法来控制属性的存取动作，以保证对私有属性操作的安全性")]),a._v(" "),n("h4",{attrs:{id:"二、继承"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#二、继承"}},[a._v("#")]),a._v(" 二、继承")]),a._v(" "),n("p",[a._v("​\t\t继承extends：多个类中存在相同属性和行为时，将这些内容抽取到单独一个类中，那么多个类无需再定义这些属性和行为，只要继承单独的那个类即可。")]),a._v(" "),n("div",{staticClass:"language-java line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-java"}},[n("code",[n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("public")]),a._v(" "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("class")]),a._v(" 子类名 "),n("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("extends")]),a._v(" 父类名"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n   类体部分\n"),n("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br"),n("span",{staticClass:"line-number"},[a._v("2")]),n("br"),n("span",{staticClass:"line-number"},[a._v("3")]),n("br")])]),n("p",[a._v("方法的重写：")]),a._v(" "),n("div",{staticClass:"language- line-numbers-mode"},[n("pre",{pre:!0,attrs:{class:"language-text"}},[n("code",[a._v("\t子类从父类继承的某个实例方法无法满足子类的功能需要时，需要在子类中对该实例方法进行重新实现，这样的过程称为重写，也叫做覆写、覆盖。\n")])]),a._v(" "),n("div",{staticClass:"line-numbers-wrapper"},[n("span",{staticClass:"line-number"},[a._v("1")]),n("br")])]),n("p",[a._v("​\t\t方法重写的前提：继承，子类的修饰符大于等于父类，方法名、参数列表、返回值类型必须相同")]),a._v(" "),n("p",[n("img",{attrs:{src:t(1431),alt:"image-20220707140122006"}})]),a._v(" "),n("h4",{attrs:{id:"三、多态"}},[n("a",{staticClass:"header-anchor",attrs:{href:"#三、多态"}},[a._v("#")]),a._v(" 三、多态")]),a._v(" "),n("p",[a._v("​\t\t多态：一种事物的多种形态")]),a._v(" "),n("p",[a._v("​\t\t即在创建完对象后可以通过其他类里的方法实现对不同对象里的同一种方法的调用")]),a._v(" "),n("p",[n("img",{attrs:{src:t(1432),alt:"image-20220707141138403"}})]),a._v(" "),n("h2",{attrs:{id:""}},[n("a",{staticClass:"header-anchor",attrs:{href:"#"}},[a._v("#")])])])}),[],!1,null,null,null);s.default=e.exports}}]);